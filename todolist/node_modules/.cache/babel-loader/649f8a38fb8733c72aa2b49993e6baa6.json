{"ast":null,"code":"var _jsxFileName = \"/Users/jacque/bookshelf/src/features/todoList/ToDoBoard.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Header } from \"../textDisplay/Header\";\nimport { Counter } from \"./Counter\";\nimport { NewTask } from \"./NewTask\";\nimport { TaskList } from \"./TaskList\";\nimport Grid from \"@mui/material/Grid\";\nimport * as React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ToDoBoard = () => {\n  _s();\n\n  const [newTask, setNewTask] = useState({});\n\n  const handleChange = ({\n    target\n  }) => {\n    const {\n      name,\n      value\n    } = target;\n    setNewTask(prev => ({ ...prev,\n      [name]: value,\n      isComplete: false\n    }));\n  };\n\n  const [allTasks, setAllTasks] = useState([]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (newTask.title !== \"\" && !allTasks.some(task => task.title === newTask.title)) {\n      setAllTasks(prev => [newTask, ...prev]);\n      setNewTask({});\n    }\n  };\n\n  const handleDelete = (taskToRemove, event) => {\n    handleComplete(taskToRemove, event);\n    setAllTasks(prev => prev.filter(task => task.title !== taskToRemove.title));\n  };\n\n  const [completeTasks, setCompleteTasks] = useState([]);\n\n  const handleComplete = (taskCompleted, event) => {\n    if (event.target.checked) {\n      setNewTask({\n        isComplete: false\n      });\n      setCompleteTasks(prev => [...prev, taskCompleted]);\n    } else {\n      setNewTask({\n        isComplete: true\n      });\n      setCompleteTasks(prev => prev.filter(task => task.title !== taskCompleted.title));\n    }\n\n    handleSort(allTasks);\n  };\n\n  const handleSort = tasks => {\n    tasks.sort((a, b) => {\n      alert(\"y\");\n      return a.isComplete - b.isComplete;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    sx: {\n      width: 1 / 3,\n      mx: \"auto\",\n      mt: 6,\n      py: 2,\n      textAlign: \"center\"\n    },\n    id: \"todoBoard\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      allTasks: allTasks,\n      completeTasks: completeTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewTask, {\n      newTask: newTask,\n      handleChange: handleChange,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      allTasks: allTasks,\n      handleDelete: handleDelete,\n      handleComplete: handleComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToDoBoard, \"XcIkzwCCKxM3betrdf1GOe174hY=\");\n\n_c = ToDoBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoBoard\");","map":{"version":3,"sources":["/Users/jacque/bookshelf/src/features/todoList/ToDoBoard.js"],"names":["useState","Header","Counter","NewTask","TaskList","Grid","React","ToDoBoard","newTask","setNewTask","handleChange","target","name","value","prev","isComplete","allTasks","setAllTasks","handleSubmit","event","preventDefault","title","some","task","handleDelete","taskToRemove","handleComplete","filter","completeTasks","setCompleteTasks","taskCompleted","checked","handleSort","tasks","sort","a","b","alert","width","mx","mt","py","textAlign"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Header } from \"../textDisplay/Header\";\nimport { Counter } from \"./Counter\";\nimport { NewTask } from \"./NewTask\";\nimport { TaskList } from \"./TaskList\";\nimport Grid from \"@mui/material/Grid\";\nimport * as React from \"react\";\n\nexport const ToDoBoard = () => {\n  const [newTask, setNewTask] = useState({});\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setNewTask((prev) => ({ ...prev, [name]: value, isComplete: false }));\n  };\n\n  const [allTasks, setAllTasks] = useState([]);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (\n      newTask.title !== \"\" &&\n      !allTasks.some((task) => task.title === newTask.title)\n    ) {\n      setAllTasks((prev) => [newTask, ...prev]);\n      setNewTask({});\n    }\n  };\n\n  const handleDelete = (taskToRemove, event) => {\n    handleComplete(taskToRemove, event);\n    setAllTasks((prev) =>\n      prev.filter((task) => task.title !== taskToRemove.title)\n    );\n  };\n\n  const [completeTasks, setCompleteTasks] = useState([]);\n  const handleComplete = (taskCompleted, event) => {\n    if (event.target.checked) {\n      setNewTask({ isComplete: false });\n      setCompleteTasks((prev) => [...prev, taskCompleted]);\n    } else {\n      setNewTask({ isComplete: true });\n      setCompleteTasks((prev) =>\n        prev.filter((task) => task.title !== taskCompleted.title)\n      );\n    }\n    handleSort(allTasks);\n  };\n\n  const handleSort = (tasks) => {\n    tasks.sort((a, b) => {\n      alert(\"y\");\n      return a.isComplete - b.isComplete;\n    });\n  };\n  return (\n    <Grid\n      sx={{\n        width: 1 / 3,\n        mx: \"auto\",\n        mt: 6,\n        py: 2,\n        textAlign: \"center\",\n      }}\n      id=\"todoBoard\"\n    >\n      <Header allTasks={allTasks} completeTasks={completeTasks} />\n\n      <NewTask\n        newTask={newTask}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n\n      <TaskList\n        allTasks={allTasks}\n        handleDelete={handleDelete}\n        handleComplete={handleComplete}\n      />\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}